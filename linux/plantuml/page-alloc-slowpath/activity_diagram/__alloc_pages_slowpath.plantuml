@startuml

title __alloc_pages_slowpath()

start
:can_direct_reclaim = gfp_mask & __GFP_DIRECT_RECLAIM;
:costly_order = order > PAGE_ALLOC_COSTLY_ORDER;
:ignore __GFP_ATOMIC;
#Orange:restart;<<input>>
:alloc_flags = gfp_to_alloc_flags(gfp_mask);
:ac->preferred_zoneref = first_zones_zonelist();
note left
    recalculate the starting
    point for the zonelist iterator
end note
:cpusets_insane_config check;
if (alloc_flags & ALLOC_KSWAPD) then (Yes)
    :wake_all_kswapds();
endif
#SkyBlue:page = get_page_from_freelist();
note left
    Perform the first slow-path
    allocation attempt using the
    adjusted assignment flag
end note
if (page) then (Yes)
    :goto got_pg;<<output>>
endif
if (can direct reclaim) then (Yes)
    :page = __alloc_pages_direct_compact();
    if (page) then (Yes)
        #Orange:goto got_pg;<<output>>
    endif
    if (costly_order && (gfp_mask & __GFP_NORETRY)) then (Yes)
        if (compact_result == COMPACT_SKIPPED\n|| compact_result == COMPACT_DEFERRED) then (Yes)
            :goto nopage;<<output>>
            note left
                the first direct-compaction also failed
                to allocate the page. If the noretry
                option is used for costly order, use
                async compaction to try again. However,
                if the compact result is in a suspended
                state, it will be moved to the nopage label
            end note
            detach
        endif
        :compact_priority = INIT_COMPACT_PRIORITY;
    endif
endif
#Orange:retry;<<input>>
:wake_all_kswapds();
note left
    Ensure kswapd doesn't accidentally
    go to sleep as long as we loop
end note
:reserve_flags = __gfp_pfmemalloc_flags();
if (reserve_flags) then (Yes)
	:alloc_flags = gfp_to_alloc_flags_cma(gfp_mask, reserve_flags)
    | (alloc_flags & ALLOC_KSWAPD);
endif
:Reset the nodemask and zonelist iterators
if memory policies can be ignored;
#SkyBlue:page = get_page_from_freelist();
if (page) then (Yes)
	:goto got_pg;<<output>>
    detach
endif
if (!can_direct_reclaim) then (Yes)
	:goto nopage;<<output>>
    detach
endif

if (current->flags & PF_MEMALLOC) then (Yes)
	:goto nopage;<<output>>
endif
if (__alloc_pages_direct_reclaim()) then (Yes)
	:goto got_pg;<<output>>
    detach
endif
if (__alloc_pages_direct_compact()) then (Yes)
	:goto got_pg;<<output>>
    detach
endif
if (<color:red>should_reclaim_retry()) then (Yes)
    :goto retry;<<output>>
    detach
endif
if (<color:red>should_compact_retry()) then (Yes)
    :goto retry;<<output>>
    detach
endif
if (check_retry_cpuset()\n|| check_retry_zonelist()) then (Yes)
	:goto restart;<<output>>
    detach
endif
if (__alloc_pages_may_oom()) then (Yes)
	:goto got_pg;<<output>>
    detach
endif
if (tsk_is_oom_victim(current)) then (Yes)
    :goto nopage;<<output>>
endif
#Orange:nopage;<<input>>
if (check_retry_cpuset()\n|| check_retry_zonelist()) then (Yes)
	:goto restart;<<output>>
    detach
endif
if (gfp_mask & __GFP_NOFAIL) then (Yes)
	if (__alloc_pages_cpuset_fallback()) then (Yes)
        :goto got_pg;<<output>>
        detach
    endif
    :cond_resched();
	:goto retry;<<output>>
    detach
endif
#Orange:got_pg;<<input>>
:return page;

stop

@enduml