@startuml
title try_to_unmap_one()

start
:init pvmw (page_vma_mapped_walk);
if ()
    :skip zone device page;
    detach
endif
if ()
    :split_huge_pmd_address();
endif
:mmu_notifier_range_init();
if (PageHuge(page)) then (Yes)
    :adjust vma range;
endif
:mmu_notifier_invalidate_range_start();
while (page_vma_mapped_walk(&pvmw))
    if ()
        :set_pmd_migration_entry();
        note left
            map the thp page to the
            migration entry via the
            pmd entry
        end note
        :continue;
        detach
    endif
    if (vma->vm_flags & VM_LOCKED) then (Yes)
        :page_vma_mapped_walk_done();
        break
    endif
    if (huge page and not shared) then (Yes)
        :flush cache;
        :page_vma_mapped_walk_done();
        break
    endif
    :handle zone device page;
    if (!(flags & TTU_IGNORE_ACCESS)) then (Yes)
        :ptep_clear_flush_young_notify();
        :page_vma_mapped_walk_done();
        break
    endif
    :flush_cache_page();
    :clear and flush PTE;
    if (pte_dirty(pteval)) then (Yes)
		:set_page_dirty(page);
        note left
            Move the dirty bit to the page.
            Now the pte is gone.
        end note
    endif
    :update_hiwater_rss();
    if (PageHWPoison(page)) then (Yes)
        :Reduce the relevant MM counters;
    elseif (userfaultfd vma) then (Yes)
        :Reduce the relevant MM counters;
    elseif (flags & (TTU_MIGRATION|TTU_SPLIT_FREEZE)) then (Yes)
        :Map the swap entry to be migrated;
    elseif (PageAnon(page)) then (Yes)
        :Store the swap location in the pte;
    endif
    :discard;<<input>>
    :put_page(page);

endwhile
:return ret;
stop

@enduml