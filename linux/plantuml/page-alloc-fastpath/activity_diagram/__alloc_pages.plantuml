@startuml

title __alloc_pages()

start
:alloc_flags = ALLOC_WMARK_LOW;
if (order >= MAX_ORDER) then (True)
    :return NULL;
    detach
endif
:gfp &= gfp_allowed_mask;
note left
    <code>
    while the kernel bootup, no driver or file system
    is ready for IO processing for page allocation,
    Therefore, in order to prevent this feature from
    being used when such requests occur, remove the
    __GFP_RECLAIM, __GFP_IO, and __GFP_FS bits from
    the gfp flag.
    </code>
end note
:gfp = current_gfp_context(gfp);
note left
    Apply scoped allocation constraints.
    This is mainly about GFP_NOFS
end note
if (!prepare_alloc_pages()) then (Yes)
note left
    init and check alloc_context
    and alloc_flags.
end note
    :return NULL;
    detach
endif
:alloc_flags |= alloc_flags_nofragment();
note left
    Forbid the first pass from falling back
    to types that fragment memory until all
    local zones are considered.
end note
:page = get_page_from_freelist();
note left:fast path
if (page) then (Yes)
    #Orange:goto out;<<output>>
    detach
endif
:ac.nodemask = nodemask;
note left
    <code>
    Restore the original nodemask if
    it was potentially replaced with
    &cpuset_current_mems_allowed to
    optimize the fast-path attempt.
    </code>
end note
:page = __alloc_pages_slowpath();
note left:slow path
#Orange:out;<<input>>
if (exceed limit of memcg) then (Yes)
    :return NULL;
    detach
endif
:return page;
stop

@enduml