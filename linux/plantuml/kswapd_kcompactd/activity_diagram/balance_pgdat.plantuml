@startuml

title balance_pgdat()

start
:init struct of scan_control;
note left
    set may_unmap = 1, so that we
    handle mapped pages
end note
:psi_memstall_enter();
:count_vm_event(PAGEOUTRUN);
:account for the reclaim boost;
#Red:restart;<<input>>
:set_reclaim_active();
:sc.priority = DEF_PRIORITY;
repeat
    :sc.reclaim_idx = highest_zoneidx;
    if (buffer_heads_over_limit) then (Yes)
        :travel node_zones;
        :sc.reclaim_idx = i;
    endif
    :pgdat_balanced();
    if (!balanced && nr_boost_reclaim) then (Yes)
        :nr_boost_reclaim = 0;
        :goto restart;<<output>>
        detach
    endif
    if (!nr_boost_reclaim && balanced) then (Yes)
		:goto out;<<output>>
        detach
    endif
    :Limit the priority of boosting;
    :Do not writeback or swap
    pages for boosted reclaim;
    :kswapd_age_node();
    if (sc.priority < DEF_PRIORITY - 2) then (Yes)
        :sc.may_writepage = 1;
    endif
    :mem_cgroup_soft_limit_reclaim();
    :kswapd_shrink_node();
 	if (waitqueue_active() \n&& allow_direct_reclaim()) then (Yes)
        :wake_up_all(&pgdat->pfmemalloc_wait);
    endif
    :Check if kswapd should be suspending;
    :Raise priority;
repeat while (sc.priority >= 1)
:Account kswapd_failures;
#Red:out;<<input>>
:clear_reclaim_active();
if (reclaim was boosted) then (Yes)
    :Update watermark_boost;
    :wakeup_kcompactd();
endif
:psi_memstall_leave();
:return sc.order;
stop

@enduml